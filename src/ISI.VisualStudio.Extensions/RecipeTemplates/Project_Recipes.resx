<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DependencyRegisterClass_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[ISI.Libraries.DependencyRegister]
	public class DependencyRegister : ISI.Libraries.IDependencyRegister
	{
		void ISI.Libraries.IDependencyRegister.Register(ISI.Libraries.IDependencyResolver dependencyResolver)
		{
		}
	}
}</value>
  </data>
  <data name="EnumText_Template" xml:space="preserve">
    <value>&lt;#@ template debug="true" hostSpecific="true" #&gt;
&lt;#@ output extension=".generated.cs" #&gt;
&lt;#@ template language="C#" #&gt;
&lt;#@ assembly name="System.Core" #&gt;
&lt;#@ Assembly Name="EnvDTE" #&gt;
&lt;#@ Assembly Name="System.Data" #&gt;
&lt;#@ import namespace="EnvDTE" #&gt;
&lt;#@ import namespace="System.Data" #&gt;
&lt;#@ import namespace="System.Data.SqlClient" #&gt;
&lt;#@ import namespace="System.IO" #&gt;
&lt;#@ import namespace="System.Text.RegularExpressions" #&gt;
&lt;#@ import namespace="System.Linq" #&gt;
&lt;#
		string enumName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
		string @namespace = "${Namespace}";

		string connectionString = "${ConnectionString}";

		string enumTableName = "${EnumTableName}";
		string enumIdColumnName = "${EnumIdColumnName}";
		string enumUuidColumnName = "${EnumUuidColumnName}";
		char aliasesDelimiter = '${AliasesDelimiter}';

		string path = Path.GetDirectoryName(Host.TemplateFile);

		// Get containing project
		IServiceProvider serviceProvider = (IServiceProvider)Host;
		DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
		Project project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
#&gt;
using System;
using System.CodeDom.Compiler;

namespace &lt;#= @namespace #&gt;
{
	/// &lt;summary&gt;
	/// &lt;#= enumName #&gt; auto generated enumeration
	/// &lt;/summary&gt;
	[GeneratedCode("TextTemplatingFileGenerator", "10")]
	public enum &lt;#= enumName #&gt;
	{
&lt;#
		SqlConnection conn = new SqlConnection(connectionString);
		string command = "SELECT [" + enumIdColumnName + "], [" + enumUuidColumnName + "], [Key], [Description], [Abbreviation], [Active], [Order], [Aliases] from " + enumTableName + " order by [" + enumIdColumnName + "]";
		SqlCommand comm = new SqlCommand(command, conn);

		conn.Open();

		SqlDataReader reader = comm.ExecuteReader();
		bool loop = reader.Read();

		while(loop)
		{
				string enumUuid = string.Format("{0:D}", reader[enumUuidColumnName]).Trim();
				string key = string.Format("{0}", reader["Key"]).Trim();
				string description = string.Format("{0}", reader["Description"]).Trim();
				string abbreviation = string.Format("{0}", reader["Abbreviation"]).Trim();
				string active = string.Format("{0}", reader["Active"]).Trim();
				if(!string.IsNullOrWhiteSpace(active))
				{
					active = (active == "0" ? "false" : "true");
				}
				string @order = string.Format("{0}", reader["Order"]).Trim();
				string aliases = string.Format("{0}", reader["Aliases"]).Trim();

				string attribute = string.Empty;
				if(!string.IsNullOrWhiteSpace(description) || !string.IsNullOrWhiteSpace(abbreviation) || !string.IsNullOrWhiteSpace(active) || !string.IsNullOrWhiteSpace(@order) || !string.IsNullOrWhiteSpace(aliases))
				{
					if(!string.IsNullOrWhiteSpace(enumUuid))
					{
						attribute += string.Format("[ISI.Libraries.EnumGuid(\"{0}\", ", enumUuid);
					}
					else
					{
						attribute += "[ISI.Libraries.EnumInformation(";
					}

					attribute += string.Format("\"{0}\"", description);

					if(!string.IsNullOrWhiteSpace(abbreviation))
					{
						attribute += string.Format(", \"{0}\"", abbreviation);
						abbreviation = null;

						if(!string.IsNullOrWhiteSpace(active))
						{
							attribute += string.Format(", {0}", active);
							active = null;


							if(!string.IsNullOrWhiteSpace(@order))
							{
								attribute += string.Format(", {0}", @order);
								@order = null;
							}
						}
					}

					if(!string.IsNullOrWhiteSpace(abbreviation))
					{
						attribute += string.Format(", abbreviation: \"{0}\"", abbreviation);
					}

					if(!string.IsNullOrWhiteSpace(active))
					{
						attribute += string.Format(", active: {0}", active);
					}

					if(!string.IsNullOrWhiteSpace(@order))
					{
						attribute += string.Format(", order: {0}", @order);
					}

					if(!string.IsNullOrWhiteSpace(aliases))
					{
						attribute += string.Format(", Aliases = new[] {{ {0} }}", string.Join(", ", aliases.Split(new [] { aliasesDelimiter }).Select(alias =&gt; string.Format("\"{0}\"", alias))));
					}

					attribute += ")] ";
				}
				#&gt;
		/// &lt;summary&gt;
		/// &lt;#= description #&gt; configuration setting.
		/// &lt;/summary&gt;
		&lt;#= attribute #&gt;&lt;#= key #&gt; = &lt;#= reader[enumIdColumnName] #&gt;&lt;# loop = reader.Read(); #&gt;&lt;#= loop ? ",\r\n" : string.Empty #&gt;
&lt;#
		}
#&gt;  }
}</value>
  </data>
  <data name="ISI_Libraries_StartUpClass_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[ISI.Libraries.StartUp]
	public class StartUp : ISI.Libraries.IStartUp
	{
		private static bool _isInitialized = false;
		public void Start()
		{
			if (!_isInitialized)
			{
				_isInitialized = true;

				ISI.Libraries.VirtualFileRepositories.Register(typeof(StartUp));
			}
		}
	}
}</value>
  </data>
  <data name="DataTransferObjectRequest_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	public class ${ClassNamePrefix}Request
	{
	}
}</value>
  </data>
  <data name="DataTransferObjectResponse_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	public class ${ClassNamePrefix}Response
	{
	}
}</value>
  </data>
  <data name="ServiceRegistrarClass_Template" xml:space="preserve">
    <value>${Usings}
using Microsoft.Extensions.DependencyInjection;

namespace ${Namespace}
{
	[ISI.Extensions.DependencyInjection.ServiceRegistrar]
	public class ServiceRegistrar : ISI.Extensions.DependencyInjection.IServiceRegistrar
	{
		public void ServiceRegister(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
		{
		}
	}
}</value>
  </data>
  <data name="SerializableDataTransferObjectRequest_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[DataContract]
	public class ${ClassNamePrefix}Request
	{
	}
}</value>
  </data>
  <data name="SerializableDataTransferObjectResponse_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[DataContract]
	public class ${ClassNamePrefix}Response
	{
	}
}</value>
  </data>
  <data name="T4LocalContent.Generator.t4_Template" xml:space="preserve">
    <value>&lt;#
/*
Copyright (c) 2024, Integrated Solutions, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
		* Neither the name of the Integrated Solutions, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#&gt;
&lt;#@ assembly name="System.Core" #&gt;
&lt;#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #&gt;
&lt;#@ assembly name="EnvDTE" #&gt;
&lt;#@ assembly name="EnvDTE80" #&gt;
&lt;#@ assembly name="VSLangProj" #&gt;
&lt;#@ import namespace="System.Collections.Generic" #&gt;
&lt;#@ import namespace="System.IO" #&gt;
&lt;#@ import namespace="System.Linq" #&gt;
&lt;#@ import namespace="System.Text" #&gt;
&lt;#@ import namespace="System.Text.RegularExpressions" #&gt;
&lt;#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #&gt;
&lt;#@ import namespace="EnvDTE" #&gt;
&lt;#@ import namespace="EnvDTE80" #&gt;
&lt;#@ import namespace="Microsoft.VisualStudio.TextTemplating" #&gt;
&lt;#		Initialize(); #&gt;
// &lt;auto-generated /&gt;
// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

&lt;#
		if (BuildT4Files)
		{
			var separator = "/";
#&gt;
#region &lt;#= Namespace #&gt;&lt;#= (string.IsNullOrWhiteSpace(FilesSubClassName) ? string.Empty : string.Format(".{0}", FilesSubClassName)) #&gt;
namespace &lt;#= Namespace #&gt;
{
&lt;#
				foreach (var subClassName in FilesSubClassNames)
				{
					PushIndent("\t");
#&gt;
[&lt;#= 		GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= subClassName #&gt;
{
&lt;#
				}

#&gt;
	public static string __root = &lt;#= (IsWebRoot ? "\"~/\"" : "null") #&gt;;
	public static string _root()
	{
		return (__root ??= ${RootGenerator}(typeof(&lt;#= FilesSubClassName #&gt;)));
	}

&lt;#

			var classNamespace = FilesSubClassName;

			foreach (ProjectItem projectItem in Project.ProjectItems)
			{
				if (RootFileNames.Exists(fileName =&gt; string.Equals(fileName, projectItem.Name, StringComparison.InvariantCultureIgnoreCase)))
				{
#&gt;
	public static readonly string &lt;#= CreateSlug(projectItem.Name) #&gt; = _root() + "&lt;#= projectItem.Name #&gt;";
&lt;#
				}
			}

				foreach (ProjectItem folderItem in Project.ProjectItems)
				{
					if (IsFolder(folderItem))
					{
						if (string.Equals(ViewsFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase) || LocalContentFileFolders.Any(name =&gt; string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
						{
							Files_ProcessContentFolder(folderItem, classNamespace, separator);
						}
						if (string.Equals(AreasRootFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase))
						{
							PushIndent("\t");
#&gt;
[&lt;#= 						GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class Areas
{
	public static string _root()
	{
		return string.Format("{0}Areas&lt;#= separator #&gt;", &lt;#= classNamespace #&gt;._root());
	}

&lt;#
							foreach (ProjectItem areaItem in folderItem.ProjectItems)
							{
								if (IsFolder(areaItem))
								{
									Files_ProcessArea(areaItem, string.Format("{0}.Areas", classNamespace), separator);
								}
							}
#&gt;
}
&lt;#
							PopIndent();
						}
					}
				}

				foreach (var subClassName in FilesSubClassNames)
				{
#&gt;
}
&lt;#
					PopIndent();
				}
#&gt;
}
#endregion

&lt;#
		}

		if (BuildT4Links)
		{
#&gt;
#region &lt;#= Namespace #&gt;&lt;#= (string.IsNullOrWhiteSpace(LinksSubClassName) ? string.Empty : string.Format(".{0}", LinksSubClassName)) #&gt;
namespace &lt;#= Namespace #&gt;
{
&lt;#
				foreach (var subClassName in LinksSubClassNames)
				{
					PushIndent("\t");
#&gt;
[&lt;#= 		GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= subClassName #&gt;
{
	private static Func&lt;string, bool, global::${IContentRoot}.IContentUrl&gt; _getContentUrl = null;
	public static Func&lt;string, bool, global::${IContentRoot}.IContentUrl&gt; GetContentUrl 
	{
		get =&gt; _getContentUrl ??= (url, isOriginalUrl) =&gt; new global::${IContentRoot}.ContentUrl(url, isOriginalUrl);
		set =&gt; _getContentUrl = value;
	}

	[${IContentRoot}.ContentUrlGeneratorSetter]
	public class ContentUrlGeneratorSetter : global::${IContentRoot}.IContentUrlGeneratorSetter
	{
		public void SetContentUrlGenerator(Func&lt;string, bool, global::${IContentRoot}.IContentUrl&gt; setter)
		{
			GetContentUrl = setter;
		}
	}

&lt;#
				}

#&gt;
	public static string __root = &lt;#= (IsWebRoot ? "\"~/\"" : "null") #&gt;;
	public static string _root()
	{
		return (__root ??= ${RootGenerator}(typeof(&lt;#= LinksSubClassName #&gt;)));
	}

&lt;#
			var classNamespace = LinksSubClassName;

			var hasRootItem = false;
			foreach (ProjectItem projectItem in Project.ProjectItems)
			{
				if (RootFileNames.Exists(fileName =&gt; string.Equals(fileName, projectItem.Name, StringComparison.InvariantCultureIgnoreCase)))
				{
					if (!hasRootItem)
					{
#&gt;
	private static global::${IContentRoot}.IContentUrl _directory = null;
	public static global::${IContentRoot}.IContentUrl _Directory =&gt; _directory ??= GetContentUrl(_root(), true);
&lt;#
						hasRootItem = true;
					}
#&gt;
	private static global::${IContentRoot}.IContentUrl _&lt;#= CreateSlug(projectItem.Name) #&gt; = null;
	public static global::${IContentRoot}.IContentUrl &lt;#= CreateSlug(projectItem.Name) #&gt; =&gt; _&lt;#= CreateSlug(projectItem.Name) #&gt; ??= GetContentUrl(_root() + "&lt;#= projectItem.Name #&gt;", true);
&lt;#
				}
			}
				if (hasRootItem)
				{
#&gt;

&lt;#
				}

				foreach (ProjectItem folderItem in Project.ProjectItems)
				{
					if (IsFolder(folderItem))
					{
						if (string.Equals(AreasRootFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase))
						{
							PushIndent("\t");
#&gt;
[&lt;#= 						GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class Areas
{
	public static string _root()
	{
		return string.Format("{0}Areas/", &lt;#= classNamespace #&gt;._root());
	}

&lt;#
							foreach (ProjectItem areaItem in folderItem.ProjectItems)
							{
								if (IsFolder(areaItem))
								{
									Links_ProcessArea(areaItem, string.Format("{0}.Areas", classNamespace));
								}
							}
#&gt;
}
&lt;#
							PopIndent();
						}
						if (LocalContentFileFolders.Any(name =&gt; string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
						{
							Links_ProcessContentFolder(folderItem, classNamespace);
						}
					}
				}

				foreach (var subClassName in LinksSubClassNames)
				{
#&gt;
}
&lt;#
					PopIndent();
				}
#&gt;
}
#endregion
&lt;#
		}

		if (BuildT4Embedded)
		{
			var separator = "/";
#&gt;

#region &lt;#= Namespace #&gt;&lt;#= (string.IsNullOrWhiteSpace(EmbeddedSubClassName) ? string.Empty : string.Format(".{0}", EmbeddedSubClassName)) #&gt;
namespace &lt;#= Namespace #&gt;
{
&lt;#
				foreach (var subClassName in EmbeddedSubClassNames)
				{
					PushIndent("\t");
#&gt;
[&lt;#= 		GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= subClassName #&gt;
{
&lt;#
				}

#&gt;
	public static string _root()
	{
		return "pack://application:,,,/&lt;#= Namespace #&gt;;component/";
	}

&lt;#

			var classNamespace = EmbeddedSubClassName;

			foreach (ProjectItem projectItem in Project.ProjectItems)
			{
				if (RootFileNames.Exists(fileName =&gt; string.Equals(fileName, projectItem.Name, StringComparison.InvariantCultureIgnoreCase)))
				{
#&gt;
	public static readonly string &lt;#= CreateSlug(projectItem.Name) #&gt; = _root() + "&lt;#= projectItem.Name #&gt;";
&lt;#
				}
			}

				foreach (ProjectItem folderItem in Project.ProjectItems)
				{
					if (IsFolder(folderItem))
					{
						if (string.Equals(ViewsFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase) || LocalContentFileFolders.Any(name =&gt; string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
						{
							Files_ProcessContentFolder(folderItem, classNamespace, separator);
						}
						if (string.Equals(AreasRootFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase))
						{
							PushIndent("\t");
#&gt;
[&lt;#= 						GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class Areas
{
	public static string _root()
	{
		return string.Format("{0}Areas&lt;#= separator #&gt;", &lt;#= classNamespace #&gt;._root());
	}

&lt;#
							foreach (ProjectItem areaItem in folderItem.ProjectItems)
							{
								if (IsFolder(areaItem))
								{
									Files_ProcessArea(areaItem, string.Format("{0}.Areas", classNamespace), separator);
								}
							}
#&gt;
}
&lt;#
							PopIndent();
						}
					}
				}

				foreach (var subClassName in EmbeddedSubClassNames)
				{
#&gt;
}
&lt;#
					PopIndent();
				}
#&gt;
}
#endregion

&lt;#
		}

		if (BuildT4Resources)
		{
			var separator = ".";
#&gt;
#region &lt;#= Namespace #&gt;&lt;#= (string.IsNullOrWhiteSpace(ResourcesSubClassName) ? string.Empty : string.Format(".{0}", ResourcesSubClassName)) #&gt;
namespace &lt;#= Namespace #&gt;
{
&lt;#
				foreach (var subClassName in ResourcesSubClassNames)
				{
					PushIndent("\t");
#&gt;
[&lt;#= 		GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= subClassName #&gt;
{
&lt;#
				}

#&gt;
	public static string _root()
	{
		return "&lt;#= Namespace #&gt;.";
	}

&lt;#

			var classNamespace = ResourcesSubClassName;

			foreach (ProjectItem projectItem in Project.ProjectItems)
			{
				if (RootFileNames.Exists(fileName =&gt; string.Equals(fileName, projectItem.Name, StringComparison.InvariantCultureIgnoreCase)))
				{
#&gt;
	public static readonly string &lt;#= CreateSlug(projectItem.Name) #&gt; = _root() + "&lt;#= projectItem.Name #&gt;";&lt;#
					if (BuildT4Resources)
					{
#&gt;
	public static System.IO.Stream Get&lt;#= CreateSlug(projectItem.Name) #&gt;Stream()
	{
		return typeof(&lt;#= Namespace #&gt;.&lt;#= ResourcesSubClassName #&gt;).Assembly.GetManifestResourceStream(&lt;#= CreateSlug(projectItem.Name) #&gt;);
	}
&lt;#
					}
				}
			}

				foreach (ProjectItem folderItem in Project.ProjectItems)
				{
					if (IsFolder(folderItem))
					{
						if (string.Equals(ViewsFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase) || LocalContentFileFolders.Any(name =&gt; string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
						{
							Files_ProcessContentFolder(folderItem, classNamespace, separator);
						}
						if (string.Equals(AreasRootFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase))
						{
							PushIndent("\t");
#&gt;
[&lt;#= 						GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class Areas
{
	public static string _root()
	{
		return string.Format("{0}Areas&lt;#= separator #&gt;", &lt;#= classNamespace #&gt;._root());
	}

&lt;#
							foreach (ProjectItem areaItem in folderItem.ProjectItems)
							{
								if (IsFolder(areaItem))
								{
									Files_ProcessArea(areaItem, string.Format("{0}.Areas", classNamespace), separator);
								}
							}
#&gt;
}
&lt;#
							PopIndent();
						}
					}
				}

				foreach (var subClassName in ResourcesSubClassNames)
				{
#&gt;
}
&lt;#
					PopIndent();
				}
#&gt;
}
#endregion

&lt;#
		}
#&gt;

&lt;#+ 
		private void Files_ProcessArea(ProjectItem projectItem, string classNamespace, string separator)
		{
			var projectItemSlug = CreateSlug(projectItem.Name);
			PushIndent("\t");
#&gt;
[&lt;#= 			GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= projectItemSlug #&gt;
{
	public static string _root()
	{
		return string.Format("{0}&lt;#= projectItem.Name #&gt;&lt;#= separator #&gt;", &lt;#= classNamespace #&gt;._root());
	}

&lt;#+
			foreach (ProjectItem folderItem in projectItem.ProjectItems)
			{
				if (IsFolder(folderItem))
				{
					if (string.Equals(ViewsFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase) || LocalContentFileFolders.Any(name =&gt; string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
					{
						Files_ProcessContentFolder(folderItem, string.Format("{0}.{1}", classNamespace, projectItemSlug), separator);
					}
				}
			}
#&gt;
}
&lt;#+
			PopIndent();
		}

		private void Files_ProcessContentFolder(ProjectItem projectFolder, string classNamespace, string separator)
		{
			var projectFolderSlug = CreateSlug(projectFolder.Name);
			PushIndent("\t");
#&gt;
[&lt;#= 			GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= projectFolderSlug #&gt;
{
	public static string _root()
	{
		return string.Format("{0}&lt;#= projectFolder.Name #&gt;&lt;#= separator #&gt;", &lt;#= classNamespace #&gt;._root());
	}

&lt;#+
			var usedNames = new List&lt;string&gt;();
			foreach (ProjectItem projectItem in projectFolder.ProjectItems)
			{
				if (IsFolder(projectItem))
				{
					if (!usedNames.Contains(projectItem.Name))
					{
						Files_ProcessContentFolder(projectItem, string.Format("{0}.{1}", classNamespace, projectFolderSlug), separator);
						usedNames.Add(projectItem.Name);
					}
				}
				else if (!LocalContentFileIgnoreFileExtensions.Any(e =&gt; projectItem.Name.EndsWith(e, StringComparison.InvariantCultureIgnoreCase)))
				{
					foreach (var fileName in ExpandFileName(projectItem.Name))
					{
						if (!usedNames.Contains(fileName))
						{
#&gt;
	public static readonly string &lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; = _root() + "&lt;#= projectItem.Name #&gt;";
&lt;#+
		if (BuildT4Resources)
		{
#&gt;
	public static System.IO.Stream Get&lt;#= CreateSlug(projectItem.Name) #&gt;Stream()
	{
		return typeof(&lt;#= Namespace #&gt;.&lt;#= ResourcesSubClassName #&gt;).Assembly.GetManifestResourceStream(&lt;#= CreateSlug(projectItem.Name) #&gt;);
	}
&lt;#+
		}
#&gt;
&lt;#+
							usedNames.Add(fileName);
						}
					}
				}

				if(projectItem.ProjectItems != null)
				{
					foreach (ProjectItem subProjectItem in projectItem.ProjectItems)
					{
						foreach (var fileName in ExpandFileName(subProjectItem.Name))
						{
							if (!usedNames.Contains(fileName))
							{
#&gt;
	public static readonly string &lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; = _root() + "&lt;#= subProjectItem.Name #&gt;";
&lt;#+
		if (BuildT4Resources)
		{
#&gt;
	public static System.IO.Stream Get&lt;#= CreateSlug(projectItem.Name) #&gt;Stream()
	{
		return typeof(&lt;#= Namespace #&gt;.&lt;#= ResourcesSubClassName #&gt;).Assembly.GetManifestResourceStream(&lt;#= CreateSlug(subProjectItem.Name) #&gt;);
	}
&lt;#+
		}
#&gt;
&lt;#+
								usedNames.Add(fileName);
							}
						}
					}
				}
			}
#&gt;
}
&lt;#+
			PopIndent();
		}

		private void Links_ProcessArea(ProjectItem projectItem, string classNamespace)
		{
			var projectItemSlug = CreateSlug(projectItem.Name);
			PushIndent("\t");
#&gt;
[&lt;#= 			GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= projectItemSlug #&gt;
{
	public static string _root()
	{
		return string.Format("{0}&lt;#= projectItem.Name #&gt;/", &lt;#= classNamespace #&gt;._root());
	}

&lt;#+
			foreach (ProjectItem folderItem in projectItem.ProjectItems)
			{
				if (IsFolder(folderItem))
				{
					if (LocalContentFileFolders.Any(name =&gt; string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
					{
						Links_ProcessContentFolder(folderItem, string.Format("{0}.{1}", classNamespace, projectItemSlug));
					}
				}
			}
#&gt;
}
&lt;#+
			PopIndent();
		}

		private void Links_ProcessContentFolder(ProjectItem projectFolder, string classNamespace)
		{
			var projectFolderSlug = CreateSlug(projectFolder.Name);
			PushIndent("\t");
#&gt;
[&lt;#= 			GeneratedCode #&gt;, DebuggerNonUserCode]
public static partial class &lt;#= projectFolderSlug #&gt;
{
	public static string _root()
	{
&lt;#+
			if(string.Equals(projectFolder.Name, "wwwroot", StringComparison.InvariantCultureIgnoreCase))
			{
#&gt;
		return &lt;#= classNamespace #&gt;._root();
&lt;#+
			}
			else
			{
#&gt;
		return string.Format("{0}&lt;#= projectFolder.Name #&gt;/", &lt;#= classNamespace #&gt;._root());
&lt;#+
			}
#&gt;
	}

	private static global::${IContentRoot}.IContentUrl _directory = null;
	public static global::${IContentRoot}.IContentUrl _Directory =&gt; _directory ??= GetContentUrl(&lt;#= classNamespace #&gt;._root() + "&lt;#= projectFolder.Name #&gt;", true);

&lt;#+
			var usedNames = new List&lt;string&gt;();
			foreach (ProjectItem projectItem in projectFolder.ProjectItems)
			{
				if (IsFolder(projectItem))
				{
					if (!usedNames.Contains(projectItem.Name))
					{
						Links_ProcessContentFolder(projectItem, string.Format("{0}.{1}", classNamespace, projectFolderSlug));
						usedNames.Add(projectItem.Name);
					}
				}
				else if (!LocalContentFileIgnoreFileExtensions.Any(e =&gt; projectItem.Name.EndsWith(e, StringComparison.InvariantCultureIgnoreCase)))
				{
					foreach (var fileName in ExpandFileName(projectItem.Name))
					{
						if (!usedNames.Contains(fileName))
						{
#&gt;
	private static global::${IContentRoot}.IContentUrl _&lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; = null;
	public static global::${IContentRoot}.IContentUrl &lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; =&gt; _&lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; ??= GetContentUrl(_root() + "&lt;#= projectItem.Name #&gt;", true);
&lt;#+
							usedNames.Add(fileName);
						}
					}

					if(projectItem.ProjectItems != null)
					{
						foreach (ProjectItem subProjectItem in projectItem.ProjectItems)
						{
							foreach (var fileName in ExpandFileName(subProjectItem.Name))
							{
								if (!usedNames.Contains(fileName))
								{
#&gt;
	private static global::ISI.Extensions.AspNetCore.IContentUrl _&lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; = null;
	public static global::ISI.Extensions.AspNetCore.IContentUrl &lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; =&gt; _&lt;#= CreateSlug(fileName, projectFolderSlug) #&gt; ??= GetContentUrl(_root() + "&lt;#= subProjectItem.Name #&gt;", true);
&lt;#+
									usedNames.Add(fileName);
								}
							}
						}
					}
				}
			}
#&gt;
}
&lt;#+
			PopIndent();
		}

	static DTE Dte;
	static Project Project;
	static Microsoft.CSharp.CSharpCodeProvider codeProvider;
	static string GeneratedCode;
	static string[] FilesSubClassNames;
	static string[] LinksSubClassNames;
	static string[] EmbeddedSubClassNames;
	static string[] ResourcesSubClassNames;
	static Dictionary&lt;System.Text.RegularExpressions.Regex, string&gt; rgFileNameReplacements;

	private void Initialize()
	{
		var serviceProvider = Host as IServiceProvider;
		if (serviceProvider != null)
		{
			Dte = serviceProvider.GetService(typeof (SDTE)) as DTE;
		}

		Project = Dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;

		codeProvider = new Microsoft.CSharp.CSharpCodeProvider();
		GeneratedCode = @"GeneratedCode(""T4LocalContent"", ""1.0"")";

		FilesSubClassNames = FilesSubClassName.Split(new string[] {"."}, StringSplitOptions.RemoveEmptyEntries);
		LinksSubClassNames = LinksSubClassName.Split(new string[] {"."}, StringSplitOptions.RemoveEmptyEntries);
		EmbeddedSubClassNames = EmbeddedSubClassName.Split(new string[] {"."}, StringSplitOptions.RemoveEmptyEntries);
		ResourcesSubClassNames = ResourcesSubClassName.Split(new string[] {"."}, StringSplitOptions.RemoveEmptyEntries);
	}

	private static List&lt;string&gt; ExpandFileName(string fileName)
	{
		var result = new List&lt;string&gt;();

		result.Add(fileName);
		if (LocalContentFileNameReplacements != null)
		{
			foreach (var fileNameReplacement in LocalContentFileNameReplacements)
			{
				if (fileNameReplacement.Key.Match(fileName).Success)
				{
					result.Add(fileNameReplacement.Value);
				}
			}
		}

		return result;
	}

	private static bool IsFolder(ProjectItem item)
	{
		return (item.Kind == EnvDTE.Constants.vsProjectItemKindPhysicalFolder);
	}

	private static string CreateSlug(string value, string className = "")
	{
		var result = value.Trim();

		result = Regex.Replace(result, @"[\W\b]", "_", RegexOptions.IgnoreCase);
		result = Regex.Replace(result, @"^\d", @"_$0");

		result = codeProvider.CreateEscapedIdentifier(result).Replace("@", "_");

		if (!string.IsNullOrEmpty(className) &amp;&amp; string.Equals(className, result, StringComparison.InvariantCulture))
		{
			result = "_" + result;
		}

		return result;
	}

#&gt;</value>
  </data>
  <data name="T4LocalContent.settings.t4_Template" xml:space="preserve">
    <value>&lt;#+
		readonly string Namespace = "${Namespace}";
		
		readonly bool IsWebRoot = ${IsWebRoot};
		readonly bool BuildT4Files = ${BuildT4Files};
		readonly string FilesSubClassName = "T4Files";
		readonly bool BuildT4Links = ${BuildT4Links};
		readonly string LinksSubClassName = "T4Links";
		readonly bool BuildT4Embedded = ${BuildT4Embedded};
		readonly string EmbeddedSubClassName = "T4Embedded";
		readonly bool BuildT4Resources = ${BuildT4Resources};
		readonly string ResourcesSubClassName = "T4Resources";

		readonly string AreasRootFolder = "Areas";
		readonly string ViewsFolder = "Views";

		readonly string[] LocalContentFileFolders = new string[] 
				{
						"wwwroot",
						"StyleSheets",
						"JavaScripts",
						"Scripts",
						"Images",
						"Content",
						"Templates",
						"DocumentTemplates",
						"EmailTemplates",
						"NotificationTemplates",
				};

		readonly string[] LocalContentFileIgnoreFileExtensions = new string[] 
				{
						".cs",
						".vb",
				};

		static readonly List&lt;string&gt; RootFileNames = new List&lt;string&gt;()
				{
						"favicon.ico",
						"favicon.png"
				};

		static readonly Dictionary&lt;System.Text.RegularExpressions.Regex, string&gt; LocalContentFileNameReplacements = new Dictionary&lt;System.Text.RegularExpressions.Regex, string&gt;()
				{
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "jquery.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "jquery.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-migrate-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "jquery-migrate.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-migrate-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "jquery-migrate.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-ui-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "jquery-ui.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-ui-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "jquery-ui.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery.signalR-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "jquery.signalR.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery.signalR-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "jquery.signalR.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery.maskedinput-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "jquery.maskedinput.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery.maskedinput-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "jquery.maskedinput.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(knockout-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "knockout.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(knockout-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "knockout.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(modernizr-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "modernizr.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(modernizr-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "modernizr.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery.signalR-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.js)$"), "jquery.signalR.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery.signalR-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.min\.js)$"), "jquery.signalR.min.js"},
						{ new System.Text.RegularExpressions.Regex(@"^(jquery-ui-(?:\d+)\.(?:\d+)(?:\.(?:\d+))?\.custom.css)$"), "jquery-ui.custom.css"}
				};
#&gt;</value>
  </data>
  <data name="T4LocalContent.tt_Template" xml:space="preserve">
    <value>&lt;#@ template language="C#" debug="true" hostspecific="true" #&gt;
&lt;#@ output extension=".generatedcode.cs" #&gt;
&lt;#@ Include File="T4LocalContent.settings.t4" #&gt;
&lt;#@ Include File="T4LocalContent.Generator.t4" #&gt;</value>
  </data>
  <data name="AssemblyInfo" xml:space="preserve">
    <value>using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("${Namespace}")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyProduct("${Namespace}")]
[assembly: AssemblyCulture("")]</value>
  </data>
  <data name="ISI_Extensions_StartUpClass_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[ISI.Extensions.StartUp]
	public class StartUp : ISI.Extensions.IStartUp
	{
		private static bool _isInitialized = false;
		public void Start()
		{
			if (!_isInitialized)
			{
				_isInitialized = true;

				ISI.Extensions.VirtualFileVolumesFileProvider.RegisterEmbeddedVolume(typeof(StartUp));
			}
		}
	}
}</value>
  </data>
  <data name="ISI_Extensions_Repository_RecordManager_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	public partial class ${RecordName}Manager : ISI.Extensions.Repository.${RepositoryType).${RecordManager}, I${RecordName}Manager
	{
		public ${RecordName}Manager(
			Microsoft.Extensions.Configuration.IConfiguration configuration,
			Configuration recordMangerConfiguration,
			Microsoft.Extensions.Logging.ILogger logger,
			ISI.Extensions.DateTimeStamper.IDateTimeStamper dateTimeStamper,
			ISI.Extensions.JsonSerialization.IJsonSerializer serializer)
			: base(configuration, logger, dateTimeStamper, serializer, recordMangerConfiguration.ConnectionString)
		{
		}
	}
}</value>
  </data>
  <data name="ISI_Libraries_Repository_RecordManager_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	public partial class ${RecordName}Manager : ISI.Libraries.Repository.${RepositoryType).${RecordManager}, I${RecordName}Manager
	{
		public ${RecordName}Manager(
			ISI.Libraries.Tracing.ITrace trace,
			ISI.Libraries.IDateTimeStamper dateTimeStamper,
			ISI.Libraries.IJsonSerializer serializer)
			: base(trace, dateTimeStamper, serializer, Configuration.Current.ConnectionString)
		{
		}
	}
}</value>
  </data>
  <data name="RecordManagerInterface_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	public interface I${RecordName}Manager
	{
	}
}</value>
  </data>
  <data name="Project_RecordManagerRecord_PrimaryKeyWithArchive_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[${codeExtensionProvider.Namespace}.Repository.Record(Schema = "XXXXXXX", TableName = "${Name}s")]
	public class ${RecordName} : ${codeExtensionProvider.Namespace}.Repository.IRecordManagerPrimaryKeyRecord&lt;${PrimaryKeyType}&gt;, ${codeExtensionProvider.Namespace}.Repository.IRecordManagerRecordWithArchiveDateTime, ${codeExtensionProvider.Namespace}.Repository.IRecordIndexDescriptions&lt;${RecordName}&gt;
	{

		[${codeExtensionProvider.Namespace}.Repository.IgnoreRecordProperty]
		${PrimaryKeyType} ${codeExtensionProvider.Namespace}.Repository.IRecordManagerPrimaryKeyRecord&lt;${PrimaryKeyType}&gt;.PrimaryKey =&gt; XXXXXX;

		[${codeExtensionProvider.Namespace}.Repository.IgnoreRecordProperty]
		DateTime ${codeExtensionProvider.Namespace}.Repository.IRecordManagerRecordWithArchiveDateTime.ArchiveDateTime =&gt; ModifyDateTimeUtc;

		${codeExtensionProvider.Namespace}.Repository.RecordIndexCollection&lt;${RecordName}&gt; ${codeExtensionProvider.Namespace}.Repository.IRecordIndexDescriptions&lt;${RecordName}&gt;.GetRecordIndexes()
		{
			return new ${codeExtensionProvider.Namespace}.Repository.RecordIndexCollection&lt;${RecordName}&gt;()
			{
				new ${codeExtensionProvider.Namespace}.Repository.RecordIndexColumnCollection&lt;${RecordName}&gt;()
				{
					{ record =&gt; record.XXXXXXXXXXXXXXXX },
				},
			};
		}
	}
}</value>
  </data>
  <data name="Project_RecordManagerRecord_PrimaryKey_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[${codeExtensionProvider.Namespace}.Repository.Record(Schema = "XXXXXXX", TableName = "${Name}s")]
	public class ${RecordName} : ${codeExtensionProvider.Namespace}.Repository.IRecordManagerPrimaryKeyRecord&lt;${PrimaryKeyType}&gt;, ${codeExtensionProvider.Namespace}.Repository.IRecordManagerRecord, ${codeExtensionProvider.Namespace}.Repository.IRecordIndexDescriptions&lt;${RecordName}&gt;
	{

		[${codeExtensionProvider.Namespace}.Repository.IgnoreRecordProperty]
		${PrimaryKeyType} ${codeExtensionProvider.Namespace}.Repository.IRecordManagerPrimaryKeyRecord&lt;${PrimaryKeyType}&gt;.PrimaryKey =&gt; XXXXXXXXXX;

		${codeExtensionProvider.Namespace}.Repository.RecordIndexCollection&lt;${RecordName}&gt; ${codeExtensionProvider.Namespace}.Repository.IRecordIndexDescriptions&lt;${RecordName}&gt;.GetRecordIndexes()
		{
			return new ${codeExtensionProvider.Namespace}.Repository.RecordIndexCollection&lt;${RecordName}&gt;()
			{
				new ${codeExtensionProvider.Namespace}.Repository.RecordIndexColumnCollection&lt;${RecordName}&gt;()
				{
					{ record =&gt; record.XXXXXXXXXXXXXXXX },
				},
			};
		}
	}
}</value>
  </data>
  <data name="Project_RecordManagerRecord_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[${codeExtensionProvider.Namespace}.Repository.Record(Schema = "XXXXXXX", TableName = "${Name}s")]
	public class ${RecordName} : ${codeExtensionProvider.Namespace}.Repository.IRecordManagerRecord, ${codeExtensionProvider.Namespace}.Repository.IRecordIndexDescriptions&lt;${RecordName}&gt;
	{

		${codeExtensionProvider.Namespace}.Repository.RecordIndexCollection&lt;${RecordName}&gt; ${codeExtensionProvider.Namespace}.Repository.IRecordIndexDescriptions&lt;${RecordName}&gt;.GetRecordIndexes()
		{
			return new ${codeExtensionProvider.Namespace}.Repository.RecordIndexCollection&lt;${RecordName}&gt;()
			{
				new ${codeExtensionProvider.Namespace}.Repository.RecordIndexColumnCollection&lt;${RecordName}&gt;()
				{
					{ record =&gt; record.XXXXXXXXXXXXXXXX },
				},
			};
		}
	}
}</value>
  </data>
  <data name="SerializableObject_Template" xml:space="preserve">
    <value>${Usings}

namespace ${Namespace}
{
	[DataContract]
	[${SerialNamespace}.PreferredSerializerJsonDataContract]
	[${SerialNamespace}.SerializerContractUuid("${ContractUuid}")]
	public class ${ClassName} : XXXXXX
	{
		public static ${ClassName} ToSerializable(LOCALENTITIES.${ClassName} source)
		{
			return new ${ClassName}()
			{
			};
		}

		public LOCALENTITIES.${ClassName} Export()
		{
			return new LOCALENTITIES.${ClassName}()
			{
			};
		}
	}
}</value>
  </data>
</root>